name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libxrender1 xvfb
        # For headless PyVista rendering
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Install system dependencies (macOS)  
      if: matrix.os == 'macos-latest'
      run: |
        # Install any macOS specific dependencies if needed
        echo "macOS dependencies installed"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,viz]"

    - name: Check package installation
      run: |
        python -c "import coral_complexity_metrics; print(coral_complexity_metrics.get_info())"
        python -c "import coral_complexity_metrics; coral_complexity_metrics.check_dependencies()"

    - name: Run linting
      run: |
        flake8 src/coral_complexity_metrics --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/coral_complexity_metrics --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking
      run: |
        mypy src/coral_complexity_metrics --ignore-missing-imports

    - name: Run basic tests
      run: |
        pytest tests/test_enhanced_functionality.py::TestEnhancedShading -v
        pytest tests/test_enhanced_functionality.py::TestMetricRegistry -v

    - name: Run complexity metrics tests
      run: |
        pytest tests/test_enhanced_functionality.py::TestComplexityMetrics -v

    - name: Run validation tests (conditional)
      run: |
        pytest tests/test_enhanced_functionality.py::TestShadingValidator -v
        pytest tests/test_enhanced_functionality.py::TestMeshVisualizer -v

    - name: Run integration tests
      run: |
        pytest tests/test_enhanced_functionality.py::TestIntegrationScenarios -v
        pytest tests/test_enhanced_functionality.py::TestRegressionProtection -v

    - name: Run documentation tests
      run: |
        pytest tests/test_enhanced_functionality.py::TestDocumentationCoverage -v

    - name: Run performance tests
      run: |
        pytest tests/test_enhanced_functionality.py::TestPerformanceAndMemory -v

    - name: Generate coverage report
      run: |
        pytest --cov=coral_complexity_metrics --cov-report=xml --cov-report=html tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  mesh-validation-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libxrender1 xvfb
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,viz]"
    
    - name: Test mesh validation functionality
      run: |
        pytest tests/test_enhanced_functionality.py::TestMeshValidator -v -k "not slow"
    
    - name: Test mesh closure detection
      run: |
        python -c "
        import coral_complexity_metrics as ccm
        import numpy as np
        import pyvista as pv
        
        # Test mesh closure detection
        points = np.array([[0,0,0], [1,0,0], [0,1,0], [0,0,1]])
        faces = np.array([[3,0,1,2], [3,0,1,3], [3,1,2,3], [3,2,0,3]])
        mesh = pv.PolyData(points, faces)
        
        if ccm.HAS_MESH_VALIDATION:
            validator = ccm.MeshValidator(verbose=True)
            result = validator.validate_mesh(mesh, repair_if_needed=False)
            print(f'Mesh validation: {result.is_valid}')
            print(f'Mesh closed: {result.is_closed}')
            assert isinstance(result.is_valid, bool)
            assert isinstance(result.is_closed, bool)
            print('✓ Mesh validation tests passed')
        else:
            print('⚠ Mesh validation not available')
        "

  shading-regression-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libxrender1 xvfb
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,viz]"
    
    - name: Test shading parameter consistency
      run: |
        python -c "
        import coral_complexity_metrics as ccm
        import numpy as np
        
        # Test shading parameter consistency
        shading = ccm.Shading(cpu_percentage=50)
        
        # Test solar position calculation consistency
        light_dir1 = shading.calculate_solar_position(180, 12.0, 0.0, 0.0)
        light_dir2 = shading.calculate_solar_position(180, 12.0, 0.0, 0.0)
        
        np.testing.assert_array_almost_equal(light_dir1, light_dir2)
        print('✓ Shading parameter consistency test passed')
        
        # Test CPU percentage validation
        try:
            ccm.Shading(cpu_percentage=-10)
            assert False, 'Should have raised ValueError'
        except ValueError:
            print('✓ CPU percentage validation test passed')
        
        # Test unsupported parameter warnings
        import warnings
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter('always')
            shading._warn_unsupported_parameters(depth=10.0, turbidity=0.5)
            assert len(w) >= 2
            print('✓ Unsupported parameter warning test passed')
        "

  metric-output-regression:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libxrender1 xvfb
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,viz]"
    
    - name: Test metric output consistency
      run: |
        python -c "
        import coral_complexity_metrics as ccm
        import numpy as np
        import pyvista as pv
        
        # Create test mesh
        points = np.array([[0,0,0], [1,0,0], [0,1,0], [0,0,1]])
        faces = np.array([[3,0,1,2], [3,0,1,3], [3,1,2,3], [3,2,0,3]])
        mesh = pv.PolyData(points, faces)
        
        # Test height range metric consistency
        height_metric = ccm.HeightRange()
        mesh_data = {'points': mesh.points}
        
        # Run multiple times
        results = []
        for _ in range(3):
            result = height_metric.calculate(mesh_data)
            results.append(result['height_range'])
        
        # Should be identical
        assert all(r == results[0] for r in results)
        assert results[0] == 1.0  # Known value for our test mesh
        print('✓ Metric output consistency test passed')
        
        # Test metric registry consistency
        registry = ccm.MetricRegistry()
        metrics1 = registry.list_metrics()
        metrics2 = registry.list_metrics()
        assert metrics1 == metrics2
        assert len(metrics1) > 0
        print('✓ Metric registry consistency test passed')
        "

  documentation-coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,docs]"
    
    - name: Check documentation coverage
      run: |
        python -c "
        import coral_complexity_metrics as ccm
        
        # Check main classes have docstrings
        assert ccm.Shading.__doc__ is not None
        assert 'STRUCTURAL-ONLY SCOPE' in ccm.Shading.__doc__
        print('✓ Shading documentation check passed')
        
        assert ccm.BaseMetric.__doc__ is not None
        assert ccm.MetricRegistry.__doc__ is not None
        print('✓ Metric system documentation check passed')
        
        assert ccm.SlopeMetric.__doc__ is not None
        assert ccm.HeightRange.__doc__ is not None
        print('✓ Complexity metrics documentation check passed')
        
        # Check method documentation
        assert ccm.Shading.calculate.__doc__ is not None
        assert ccm.Shading.calculate_solar_position.__doc__ is not None
        print('✓ Method documentation check passed')
        "

  package-build:
    runs-on: ubuntu-latest
    needs: [test, mesh-validation-tests, shading-regression-tests, metric-output-regression, documentation-coverage]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import coral_complexity_metrics; print('✓ Package installation successful')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: package-build
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }} 